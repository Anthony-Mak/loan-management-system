<?php
// Start or resume a session
session_start();

// Store data in the session
$_SESSION['username'] = 'john_doe';
$_SESSION['loggedIn'] = true;

// Access session data later
if ($_SESSION['loggedIn']) {
  echo "Welcome back, " . $_SESSION['username'];
}
?> 
 The session data is stored on the server, and the client only receives a session ID. This session ID is stored in a cookie, which is sent with every request to the server. The server uses this session ID to retrieve the session data and associate it with the current request. 
 Server-side sessions are more secure than client-side sessions because the session data is stored on the server and not accessible to the client. However, they require more server resources and can be slower than client-side sessions. 
 Client-Side Sessions 
 Client-side sessions store session data on the client side, typically in a cookie or local storage. This approach is faster and requires fewer server resources than server-side sessions. However, it is less secure because the session data is accessible to the client. 
 Client-side sessions are commonly used in single-page applications (SPAs) and other client-side applications where server-side storage is not practical. 
 Example of Client-Side Sessions 
 Here is an example of using client-side sessions in JavaScript: